#INFO: **** input file is /home/yichi/research/software/cs_afqmc/ad_afqmc/cisd_perturb/test.py ****
from pyscf import gto, scf, cc
import numpy as np
from jax import numpy as jnp
from jax import vmap

a = 1.5 # 2aB
nH = 2
atoms = ""
for i in range(nH):
    atoms += f"H {i*a:.5f} 0.00000 0.00000 \n"

mol = gto.M(atom=atoms, basis="ccpvdz", verbose=4)
mol.build()

mf = scf.RHF(mol)#.density_fit()
e = mf.kernel()

mycc = cc.CCSD(mf)
e = mycc.kernel()

options = {'n_eql': 4,
           'n_prop_steps': 10,
            'n_ene_blocks': 1,
            'n_sr_blocks': 10,
            'n_blocks': 10,
            'n_walkers': 2,
            'seed': 2,
            'walker_type': 'rhf',
            'trial': 'cisd',
            'dt':0.005,
            'free_projection':False,
            'ad_mode':None,
            'use_gpu': False,
            }

from ad_afqmc import pyscf_interface, mpi_jax, wavefunctions
from ad_afqmc.cisd_perturb import sample_pt
pyscf_interface.prep_afqmc(mycc,chol_cut=1e-7)

sample_pt.run_afqmc_cisd_pt(options,nproc=5)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='yichi-thinkpad', release='4.4.0-26100-Microsoft', version='#5074-Microsoft Fri Jan 01 08:00:00 PST 2016', machine='x86_64')  Threads 12
Python 3.10.16 | packaged by conda-forge | (main, Dec  5 2024, 14:16:10) [GCC 13.3.0]
numpy 1.24.3  scipy 1.14.1  h5py 3.12.1
Date: Mon Oct  6 13:32:59 2025
PySCF version 2.8.0
PySCF path  /home/yichi/research/software/lno_pyscf
GIT HEAD (branch master) ef75f4190e4de208685670651dc6c467f72b6794

[ENV] PYSCF_EXT_PATH /home/yichi/research/software/pyscf
[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 2
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 H      0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT]  2 H      1.500000000000   0.000000000000   0.000000000000 AA    2.834589186848   0.000000000000   0.000000000000 Bohr   0.0

nuclear repulsion = 0.35278480728
number of shells = 6
number of NR pGTOs = 14
number of NR cGTOs = 10
basis = ccpvdz
ecp = {}
CPU time:         1.25


******** <class 'pyscf.scf.hf.RHF'> ********
method = RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
diis_damp = 0
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /tmp/tmp8dskhh5p
max_memory 4000 MB (current use 131 MB)
Set gradient conv threshold to 3.16228e-05
Initial guess from minao.
init E= -0.686568893940047
  HOMO = -0.318700070408885  LUMO = -0.0245644330909996
cycle= 1 E= -1.00151560873594  delta_E= -0.315  |g|= 0.0438  |ddm|= 0.692
  HOMO = -0.441248522421468  LUMO = 0.0376754509418539
cycle= 2 E= -1.0021777133285  delta_E= -0.000662  |g|= 0.00656  |ddm|= 0.0227
  HOMO = -0.43913882229559  LUMO = 0.0403374338109172
cycle= 3 E= -1.00219274233321  delta_E= -1.5e-05  |g|= 7.56e-05  |ddm|= 0.00386
  HOMO = -0.439159115489483  LUMO = 0.040297868226788
cycle= 4 E= -1.00219274548502  delta_E= -3.15e-09  |g|= 1.63e-06  |ddm|= 0.000135
  HOMO = -0.439163233525398  LUMO = 0.040297012698129
cycle= 5 E= -1.00219274548654  delta_E= -1.51e-12  |g|= 1.54e-11  |ddm|= 2.9e-06
  HOMO = -0.43916323350795  LUMO = 0.0402970127062035
Extra cycle  E= -1.00219274548654  delta_E=    0  |g|= 2.93e-12  |ddm|= 2.22e-11
converged SCF energy = -1.00219274548654

******** <class 'pyscf.cc.ccsd.CCSD'> ********
CC2 = 0
CCSD nocc = 1, nmo = 10
max_cycle = 50
direct = 0
conv_tol = 1e-07
conv_tol_normt = 1e-05
diis_space = 6
diis_start_cycle = 0
diis_start_energy_diff = 1e+09
max_memory 4000 MB (current use 136 MB)
Init t2, MP2 energy = -1.03783589851283  E_corr(MP2) -0.0356431530262891
Init E_corr(CCSD) = -0.0356431530262891
cycle = 1  E_corr(CCSD) = -0.0467544745976624  dE = -0.0111113216  norm(t1,t2) = 0.0694497
cycle = 2  E_corr(CCSD) = -0.0524546867867973  dE = -0.00570021219  norm(t1,t2) = 0.0390726
cycle = 3  E_corr(CCSD) = -0.0595013240943191  dE = -0.00704663731  norm(t1,t2) = 0.0219334
cycle = 4  E_corr(CCSD) = -0.0592859300816912  dE = 0.000215394013  norm(t1,t2) = 0.000590954
cycle = 5  E_corr(CCSD) = -0.0593438867304178  dE = -5.79566487e-05  norm(t1,t2) = 0.000197468
cycle = 6  E_corr(CCSD) = -0.0593426531862167  dE = 1.2335442e-06  norm(t1,t2) = 7.99313e-06
cycle = 7  E_corr(CCSD) = -0.0593421717449734  dE = 4.81441243e-07  norm(t1,t2) = 1.43024e-06
cycle = 8  E_corr(CCSD) = -0.0593422250442197  dE = -5.32992463e-08  norm(t1,t2) = 1.37983e-07
CCSD converged
E(CCSD) = -1.061534970530758  E_corr = -0.05934222504421967
# Hostname: yichi-thinkpad
# System Type: Linux
# Machine Type: x86_64
# Processor: x86_64
#
# Preparing AFQMC calculation
# If you import pyscf cc modules and use MPI for AFQMC in the same script, finalize MPI before calling the AFQMC driver.
# Calculating Cholesky integrals
# Finished calculating Cholesky integrals
#
# Size of the correlation space:
# Number of electrons: (1, 1)
# Number of basis functions: 10
# Number of Cholesky vectors: 53
#
# Hostname: yichi-thinkpad
# System Type: Linux
# Machine Type: x86_64
# Processor: x86_64
# Number of MPI ranks: 5
#
# norb: 10
# nelec: (1, 1)
#
# n_eql: 4
# n_prop_steps: 10
# n_ene_blocks: 1
# n_sr_blocks: 10
# n_blocks: 10
# n_walkers: 2
# seed: 2
# walker_type: rhf
# trial: cisd
# dt: 0.005
# free_projection: False
# use_gpu: False
# n_exp_terms: 6
# orbital_rotation: True
# do_sr: True
# symmetry: False
# save_walkers: False
# n_batch: 1
# ene0: 0
# LNO: False
# orbE: 0
# maxError: 0.001
#
# Hostname: yichi-thinkpad
# System Type: Linux
# Machine Type: x86_64
# Processor: x86_64
# Equilibration sweeps:
#   Iter 	 energy_pt 	 energy_og 	 Walltime
#     0 	 -1.0615350 	 -1.0615350 	 4.19
#     1 	 -1.0615125 	 -1.0615350 	 13.43 
#     2 	 -1.0624558 	 -1.0615350 	 20.51 
#     3 	 -1.0655910 	 -1.0615351 	 20.56 
#     4 	 -1.0614678 	 -1.0615349 	 20.60 
#
# Sampling sweeps:
#  Iter 	 energy_pt 	 error 		 energy_og 	 error 	 Walltime
     0 	 	 -1.061385 	   None   	 -1.061535 	 0.000000  20.70
     1 	 	 -1.061460 	 0.000084 	 -1.061535 	 0.000000  27.58
     2 	 	 -1.061564 	 0.000115 	 -1.061535 	 0.000000  35.10
     3 	 	 -1.061440 	 0.000151 	 -1.061535 	 0.000000  35.15
     4 	 	 -1.061513 	 0.000137 	 -1.061535 	 0.000000  35.20
     5 	 	 -1.061535 	 0.000110 	 -1.061535 	 0.000000  35.25
     6 	 	 -1.061514 	 0.000101 	 -1.061535 	 0.000000  35.30
     7 	 	 -1.061493 	 0.000084 	 -1.061535 	 0.000000  35.36
     8 	 	 -1.061508 	 0.000077 	 -1.061535 	 0.000000  35.41
     9 	 	 -1.061534 	 0.000072 	 -1.061535 	 0.000000  35.47
# Number of outliers in post: 15 
#
# Mean: -1.06153422e+00
# Block size    # of blocks         Mean                Error
      1               35       -1.06153422e+00       4.089668e-06
      2               17       -1.06153514e+00       4.417953e-06
      3               11       -1.06153496e+00       4.657852e-06
      5                7       -1.06153422e+00       5.335881e-06
     10                3       -1.06153477e+00       2.524314e-06
     15                2       -1.06153477e+00       6.616672e-06
# Stocahstic error estimate: 5.335881e-06
#
#
# Mean: -1.06153500e+00
# Block size    # of blocks         Mean                Error
      1               35       -1.06153500e+00       0.000000e+00
      2               17       -1.06153500e+00       0.000000e+00
      3               11       -1.06153500e+00       0.000000e+00
      5                7       -1.06153500e+00       0.000000e+00
     10                3       -1.06153500e+00       0.000000e+00
     15                2       -1.06153500e+00       0.000000e+00
# Stocahstic error estimate: 0.000000e+00
#
Final Results:
AFQMC/CISD_PT energy: -1.061534 +/- 0.000005
AFQMC/CISD_OG energy: -1.061535 +/- 0.000000
total run time: 35.47
# running AFQMC on CPU
